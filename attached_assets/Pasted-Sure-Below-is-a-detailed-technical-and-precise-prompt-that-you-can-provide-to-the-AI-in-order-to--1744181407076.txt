Sure! Below is a detailed, technical, and precise prompt that you can provide to the AI in order to integrate and use both the **OMDb API** and **TMDb API** together for optimal collaboration on your website. The goal is to seamlessly integrate the APIs to fetch and display data about movies, TV shows, and related content effectively.

---

### **Prompt: Integration of OMDb API and TMDb API for Movie and TV Content Management**

**Objective:**
Integrate both the **OMDb API** and **TMDb API** to provide detailed information about movies, TV shows, and other related content on the site. Use TMDb API for general movie and show metadata and OMDb API for enhanced movie-specific details (like ratings, plot, cast, etc.). Implement smooth synchronization between the two APIs to offer the most comprehensive user experience.

---

### **Step-by-Step Requirements:**

1. **API Integration Setup:**
   - **TMDb API Setup:**
     - Use the [TMDb API](https://www.themoviedb.org/documentation/api) to fetch popular movies, trending shows, top-rated content, and content details such as titles, posters, genres, etc.
     - Key API methods:
       - `/movie/popular`
       - `/tv/popular`
       - `/movie/{movie_id}`
       - `/tv/{tv_id}`
       - `/movie/credits` (for cast details)
     - The data returned will include:
       - Movie/TV show titles
       - Poster images
       - Genre(s)
       - Average rating
       - Overview (short summary)

   - **OMDb API Setup:**
     - Use the [OMDb API](http://www.omdbapi.com/) to fetch enhanced movie-specific details not available in TMDb, such as:
       - Plot summaries
       - Full cast and crew details
       - IMDb ratings
       - Release dates
       - Runtime
     - The API key provided to you is: `d269c56e`.
     - Key API methods:
       - `/`
       - Example URL: `http://www.omdbapi.com/?i=tt3896198&apikey=d269c56e`

2. **Data Synchronization and Fetching Logic:**
   - **Fetching Data from TMDb:**
     - Fetch general content data (e.g., popular movies, trending shows, etc.) using TMDb.
     - Cache this data (either locally or in the database) for better performance (e.g., 24-hour caching).
     - For each movie or show, retrieve its unique identifier (`id`) from TMDb.

   - **Fetching Additional Information from OMDb:**
     - For each movie or show returned by TMDb, use its IMDb ID (usually available in TMDb data) to query the OMDb API for richer content details.
     - Fetch details like IMDb rating, plot, cast, release year, etc., from OMDb.
     - Example API request: `http://www.omdbapi.com/?i=tt3896198&apikey=d269c56e`
     - Merge the OMDb data with the TMDb data into a single object for the final result.

   - **Optimizing API Calls:**
     - **API Caching:** Use a caching layer (e.g., Redis, or in-memory cache) to store the results of the OMDb API calls for each unique movie/show for a period of time (e.g., 24 hours). This prevents redundant API calls.
     - **API Rate Limiting:** Ensure that both APIs are queried in a way that adheres to their rate limits. Use strategies like debouncing, queuing, or delaying requests to avoid hitting the rate limit.
     - Use the IMDb ID from TMDb to query OMDb only if necessary (i.e., if the data isn’t already cached).

3. **Frontend Implementation:**
   - **Displaying Data on the Frontend:**
     - Once the data is merged, render a **ContentCard** component that displays the following:
       - Movie/Show Title
       - Genre(s)
       - Poster Image (from TMDb)
       - IMDb Rating (from OMDb)
       - Short Summary (from TMDb)
       - Full Plot (from OMDb)
       - Cast (from OMDb and TMDb)
       - Release Date (from OMDb)
       - Runtime (from OMDb)

   - **Loading State:**
     - Display a loading skeleton or shimmer effect until both APIs respond with the data. Use a **Skeleton Loader** for a seamless user experience while data is being fetched.
     - Ensure that the page doesn’t refresh and the user experience is optimized with **React Query** for state management and caching.
     - Use **Framer Motion** to add smooth transitions when switching between content (e.g., when switching between movie details).

4. **Error Handling and Resilience:**
   - **Error Boundaries in React:**
     - Implement `ErrorBoundary` components around critical parts of the app (e.g., ContentCard) to catch any errors (e.g., if an API request fails).
     - Display friendly error messages using `toast` notifications for API failures (e.g., "Failed to load movie details").

   - **Handling Failed API Requests:**
     - Implement a **retry mechanism** for failed OMDb API requests. Use exponential backoff or a fixed retry limit to avoid overwhelming the APIs.
     - If the OMDb data is not available (e.g., for certain movies or shows), fallback to displaying only TMDb data.

5. **Backend Setup (Optional but Recommended):**
   - **Create an Endpoint to Serve Content:**
     - Set up a backend API endpoint that queries both the TMDb and OMDb APIs and returns the merged results to the frontend.
     - Example: `GET /api/content/{movie_id}` (this endpoint will handle both the fetching of TMDb and OMDb data and serve it to the frontend).

   - **Data Caching on Server:**
     - Cache both TMDb and OMDb data on the server side, refreshing the cache periodically (e.g., every 24 hours).
     - Use a database (e.g., MongoDB) or Redis to cache the results to improve performance.

6. **Best Practices and Additional Optimizations:**
   - **SEO Optimization:**
     - Ensure that the movie/show titles, posters, and other meta data are SEO-friendly (e.g., using `<meta>` tags for sharing on social media and improving search engine ranking).
   
   - **Load More vs Infinite Scroll:**
     - Implement **infinite scroll** or **load more buttons** for movie lists (popular movies, top-rated movies) to improve the user experience.

   - **Responsive Design:**
     - Ensure that all components are mobile-friendly, using flexible layouts (e.g., grid-based layouts) to display content appropriately on various screen sizes.

---

### **Key Considerations:**
- **Performance Optimization:** Caching both TMDb and OMDb API responses and using **React Query** for fetching and managing data will significantly reduce API calls, improve speed, and provide a smoother experience.
- **Data Consistency:** Ensure that the data from both APIs is properly merged and synchronized. This will prevent showing incomplete or incorrect information to users.
- **Rate Limiting:** Both OMDb and TMDb have rate limits. Monitor API usage and ensure your application can handle these limits without running into issues.

---

### **Expected Outcome:**
With this setup, your website will seamlessly integrate both TMDb and OMDb data, offering users a rich and comprehensive movie and TV show browsing experience. By leveraging both APIs, you will have access to a wide array of data (from general metadata to detailed content) and provide the best possible content to your users.

---

This prompt should provide the AI with a clear and detailed set of instructions to help you integrate both APIs efficiently into your website.