Here’s a detailed technical prompt for AI to help optimize and enhance your website’s backend and frontend integration, focusing on data flow, synchronization, and user experience improvements.

---

**Prompt:**

### 1. **Data Flow & Synchronization**

**Objective:**  
Implement a smart TMDB caching system and an automatic data synchronization mechanism to ensure smooth data updates and improve user experience.

**Actions:**
- **Implement Smart TMDB Caching:**
   - Cache API calls for 24 hours to optimize requests.
   - Implement cache validation mechanism to automatically refresh expired data.
  
- **Create Automatic Data Synchronization System:**
   - Use **Socket.IO** to enable real-time data updates on the frontend whenever there are changes in the backend.
   - Implement an **optimistic update mechanism** to improve user experience by immediately reflecting changes on the frontend while waiting for confirmation from the backend.

- **Handle Communication Errors:**
   - Create an **ErrorBoundary component** in React to handle API errors gracefully.
   - Provide **friendly error messages** via toasts or inline alerts to ensure users are informed of any issues.

---

### 2. **UI/UX Integration**

**Objective:**  
Enhance the content display and user interaction experience with seamless transitions and dynamic layouts.

**Actions:**
- **Enhance Content Display:**
   - Standardize the display of titles, descriptions, ratings, and metadata in the **ContentCard component**.
   - Integrate styles with **glassmorphism design principles** to create modern, visually appealing elements.

- **Implement Transition Animations:**
   - Add **smooth transition animations** between pages using **Framer Motion** for a more fluid user experience.
   - Implement **loading states** with a shimmer effect to indicate content is being fetched or loaded.

- **Coordinate Styles with Dynamic Data:**
   - Create a flexible **grid layout** system that adapts based on the data amount (e.g., if there are fewer items, the grid should adjust dynamically).
   - Use **Skeleton Loaders** to display loading states for content while data is being fetched.

---

### 3. **Admin Panel**

**Objective:**  
Create a robust content management system that allows admins to manage content seamlessly, with options for automatic data fetching and manual editing.

**Actions:**
- **Create Content Management Interface:**
   - Develop a **form** for adding new content with an **instant preview** of the content as it's being added.
   - Implement a **"Get Info from TMDB"** button to automatically populate the fields with relevant data like movie details, cast, ratings, etc.

- **Image Upload and Management:**
   - Allow **custom image uploads** for poster and background images.
   - Provide an option to **use images from TMDB** or **replace them with custom images**.

- **Manage & Edit Content:**
   - Enable editing of all content fields with **real-time frontend updates**.
   - Implement a system for defining **relationships between content** (e.g., linking films to genres).

---

### 4. **Error Management & Notifications**

**Objective:**  
Ensure robust error management with proper logging and notifications to maintain system reliability.

**Actions:**
- **Unified Error Management:**
   - Implement an **API error handler middleware** on the backend to handle errors consistently.
   - Create a **shared error library** for frontend and backend to handle common error types.
  
- **Logging & Notifications:**
   - Set up **logging system** with different levels (error, warning, info) to track the status of the application.
   - Implement an **admin notification system** to alert them in case of critical errors.

- **Automatic Recovery:**
   - Implement **retry mechanisms** for failed API requests to recover from temporary failures.
   - Design a **data buffer system** to prevent data loss in case of connectivity issues.

---

### 5. **Uniformity & Consistency**

**Objective:**  
Standardize the design and behavior of the site to ensure a cohesive and professional look and feel.

**Actions:**
- **Standardize Data Display:**
   - Make sure that ratings, dates, and metadata are displayed uniformly across all pages of the site.
   - Use a consistent **theme system** that supports both **light and dark modes** for user preference.

- **UI Component Integration:**
   - Standardize UI components using **shadcn/ui** to ensure visual consistency across the site.
   - Develop a **Design Tokens system** to ensure uniformity in colors, spacing, and font sizes.

---

### 6. **Performance Optimization**

**Objective:**  
Improve site performance and reduce loading times for better user experience.

**Actions:**
- **Optimize API Requests:**
   - Use **React Query** for managing caching and minimizing repeated API calls.
   - Implement **Infinite Scroll** to load more content progressively, instead of using traditional pagination.

- **Improve Load Time:**
   - Implement **lazy loading** for images and heavy components to optimize initial load time.
   - Use **Code Splitting** in React to break up large JavaScript files, improving the time-to-interactive.

- **Database Optimization:**
   - Create appropriate **indexes** in MongoDB for common queries to speed up data retrieval.
   - Use **aggregation techniques** to reduce the number of queries and improve data processing efficiency.

---

### Execution Phases:

- **Phase 1:** 
   - Implement API system and **ErrorBoundary** in the frontend.
   - Improve existing components to display loading states.
   - Integrate **React Query** for state and caching management.

- **Phase 2:** 
   - Set up **real-time synchronization** using **Socket.IO**.
   - Develop the **admin panel** with content addition and editing capabilities.
   - Complete **image upload and management** features.

- **Phase 3:**
   - Optimize performance and reduce response times.
   - Implement a **logging and monitoring system**.
   - Conduct thorough testing and resolve any synchronization issues.

---

**Question:**  
Do you have any preferred areas to start implementing from the proposed plan? I recommend beginning with the frontend component improvements and integrating **React Query** to quickly enhance the user experience and see tangible results.

---

This prompt outlines a clear, actionable plan to improve the performance, UI/UX, and backend synchronization of your website, allowing AI to fine-tune and optimize the entire system based on these guidelines.