Here's a detailed and professional prompt you can use to ensure synchronization between the front-end and back-end of your website, optimized for an AI to edit your site:

---

**Prompt: Synchronizing Front-End and Back-End Integration for Seamless User Experience**

**Objective**: Ensure that both the front-end and back-end of the website work together seamlessly, with no discrepancies or issues between them. The goal is to create a fully synchronized system where data flows smoothly from the server (back-end) to the user interface (front-end) and vice versa.

**Details**:

1. **Data Flow and Synchronization**:
   - Ensure that when data is submitted or retrieved from the back-end (such as through APIs or database queries), it is correctly displayed on the front-end without any delays or errors.
   - Make sure that the front-end (UI elements) dynamically adjusts to the incoming data, whether it's text, images, or interactive elements.
   - If any error occurs during data retrieval or submission, it should be clearly communicated to the user in a friendly and informative manner on the front-end.
   - Ensure the database (MongoDB) is automatically updated with every new content submission from the front-end, and synchronization happens in real-time to prevent data loss.

2. **UI/UX Integration**:
   - On the front-end, all elements like images, titles, descriptions, ratings, and other metadata should be displayed accurately and consistently, with correct formatting and alignment.
   - The front-end should dynamically adapt to changes on the back-end. For example, if a new movie is added in the back-end, the UI should reflect the updated list, including updated ratings, images, and background information.
   - Implement smooth transitions between sections (e.g., when navigating from one section like "Movies" to "Actors" or "Directors") to ensure the user experience is fluid.
   - The design should also handle error cases gracefully (e.g., displaying a loading spinner or error message if the back-end is temporarily unavailable).

3. **Admin Panel**:
   - Integrate a feature in the admin panel where the administrator can easily add new content (like movies, TV shows, actors, etc.).
   - Include a "Get Info from TMDB" option, allowing the admin to pull relevant metadata (e.g., images, ratings, director, actors, release date, etc.) directly from the TMDB API. Ensure that the admin can either auto-populate these fields or manually enter them.
   - Make sure that once the content is added via the admin panel, itâ€™s automatically synced to the database without any further manual intervention.
   - Ensure that the admin can review and edit content details, including the option to replace images or modify ratings or descriptions, with real-time updates reflecting on the front-end.

4. **Error Handling and Notifications**:
   - Implement clear and effective error handling between the front-end and back-end. For example, if the back-end API fails to fetch data, display a user-friendly error message or an option to retry.
   - Ensure the system logs all errors related to synchronization for troubleshooting purposes. The admin should be notified in case of any failed API requests or synchronization issues.

5. **Consistency**:
   - Maintain consistency in design and functionality between the front-end and back-end. Data fetched from the back-end (such as TMDB API for movies) should be displayed in a structured, organized, and aesthetically pleasing way on the front-end.
   - Ensure that data formatting is consistent across the site (e.g., ratings are always shown with a consistent scale, release dates in the same format, etc.).

6. **Performance**:
   - Ensure that both front-end and back-end are optimized for performance. API requests should be fast, and data should load efficiently without significant delays. Consider using caching mechanisms to reduce the load on the back-end and speed up the front-end rendering.
   - Test for load times and implement best practices like lazy loading for images, especially for large assets like movie posters or background images.

---

**Additional Instructions for AI**:
- Review and ensure the integration of front-end and back-end processes is smooth and efficient.
- Implement real-time data sync between the database and the front-end UI.
- Automatically retrieve and display information from external sources (like the TMDB API) while allowing manual overrides in the admin panel.
- Validate that all data displayed on the front-end is accurate, consistent, and up-to-date with the back-end.

---

This prompt provides clear instructions for ensuring that the front-end and back-end are working in sync, while also integrating features like API fetching, real-time updates, and error handling. The AI will be able to apply these principles to maintain seamless functionality across your website.